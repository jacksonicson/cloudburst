// This file is automatically generated. Do not modify.

package times

type Element struct {
	Timestamp int64 `thrift:"1,required" json:"timestamp"`
	Value int64 `thrift:"2,required" json:"value"`
}

type TimeSeries struct {
	Name string `thrift:"1,required" json:"name"`
	Frequency int32 `thrift:"2,required" json:"frequency"`
	Elements []*Element `thrift:"3,required" json:"elements"`
}

type RPCClient interface {
	Call(method string, request interface{}, response interface{}) error
}

type TimeService interface {
	Append(Name string, Elements []*Element) error
	Create(Name string, Frequency int32) error
	Find(Pattern string) ([]string, error)
	Load(Name string) (*TimeSeries, error)
	Remove(Name string) error
}

type TimeServiceServer struct {
	Implementation TimeService
}

func (s *TimeServiceServer) Append(req *TimeServiceAppendRequest, res *TimeServiceAppendResponse) error {
	err := s.Implementation.Append(req.Name, req.Elements)
	switch e := err.(type) {
	}
	return err
}

func (s *TimeServiceServer) Create(req *TimeServiceCreateRequest, res *TimeServiceCreateResponse) error {
	err := s.Implementation.Create(req.Name, req.Frequency)
	switch e := err.(type) {
	}
	return err
}

func (s *TimeServiceServer) Find(req *TimeServiceFindRequest, res *TimeServiceFindResponse) error {
	val, err := s.Implementation.Find(req.Pattern)
	switch e := err.(type) {
	}
	res.Value = val
	return err
}

func (s *TimeServiceServer) Load(req *TimeServiceLoadRequest, res *TimeServiceLoadResponse) error {
	val, err := s.Implementation.Load(req.Name)
	switch e := err.(type) {
	}
	res.Value = val
	return err
}

func (s *TimeServiceServer) Remove(req *TimeServiceRemoveRequest, res *TimeServiceRemoveResponse) error {
	err := s.Implementation.Remove(req.Name)
	switch e := err.(type) {
	}
	return err
}

type TimeServiceAppendRequest struct {
	Name string `thrift:"1,required" json:"name"`
	Elements []*Element `thrift:"2,required" json:"elements"`
}

type TimeServiceAppendResponse struct {
}

type TimeServiceCreateRequest struct {
	Name string `thrift:"1,required" json:"name"`
	Frequency int32 `thrift:"2,required" json:"frequency"`
}

type TimeServiceCreateResponse struct {
}

type TimeServiceFindRequest struct {
	Pattern string `thrift:"1,required" json:"pattern"`
}

type TimeServiceFindResponse struct {
	Value []string `thrift:"0,required" json:"value"`
}

type TimeServiceLoadRequest struct {
	Name string `thrift:"1,required" json:"name"`
}

type TimeServiceLoadResponse struct {
	Value *TimeSeries `thrift:"0,required" json:"value"`
}

type TimeServiceRemoveRequest struct {
	Name string `thrift:"1,required" json:"name"`
}

type TimeServiceRemoveResponse struct {
}

type TimeServiceClient struct {
	Client RPCClient
}

func (s *TimeServiceClient) Append(Name string, Elements []*Element) error {
	req := &TimeServiceAppendRequest{
		Name: Name,
		Elements: Elements,
	}
	res := &TimeServiceAppendResponse{}
	err := s.Client.Call("append", req, res)
	return err
}

func (s *TimeServiceClient) Create(Name string, Frequency int32) error {
	req := &TimeServiceCreateRequest{
		Name: Name,
		Frequency: Frequency,
	}
	res := &TimeServiceCreateResponse{}
	err := s.Client.Call("create", req, res)
	return err
}

func (s *TimeServiceClient) Find(Pattern string) ([]string, error) {
	req := &TimeServiceFindRequest{
		Pattern: Pattern,
	}
	res := &TimeServiceFindResponse{}
	err := s.Client.Call("find", req, res)
	return res.Value, err
}

func (s *TimeServiceClient) Load(Name string) (*TimeSeries, error) {
	req := &TimeServiceLoadRequest{
		Name: Name,
	}
	res := &TimeServiceLoadResponse{}
	err := s.Client.Call("load", req, res)
	return res.Value, err
}

func (s *TimeServiceClient) Remove(Name string) error {
	req := &TimeServiceRemoveRequest{
		Name: Name,
	}
	res := &TimeServiceRemoveResponse{}
	err := s.Client.Call("remove", req, res)
	return err
}
